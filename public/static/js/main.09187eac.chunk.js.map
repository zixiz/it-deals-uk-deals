{"version":3,"sources":["logo.svg","component/product/product.js","component/sony.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Product","state","this","props","data","map","product","index","className","key","src","image","href","url","title","Component","Sony","dataFromServer","fetch","then","response","json","console","log","setState","items","catch","error","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","App","path","exact","component","from","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,kLCqC5BC,G,MAlCf,2MACIC,MAAQ,GADZ,wEAMQ,OACI,6BACKC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAQC,GAAT,OACjB,yBAAKC,UAAU,cAAcC,IAAKF,GAC1B,yBAAKC,UAAU,kBACX,6BACI,yBAAKE,IAAKJ,EAAQK,UAG1B,yBAAKH,UAAU,OACX,6BACI,uBAAGI,KAAMN,EAAQO,KAAMP,EAAQQ,QAEnC,yBAAKN,UAAU,QACX,mCACA,qCAAU,wCAAV,yBArBpC,GAA6BO,cC8DdC,G,MA7Df,2MACIf,MAAO,CACHgB,eAAe,IAFvB,mFAKyB,IAAD,OAChBC,MAAM,cAAcC,MAAK,SAACC,GAAD,OAAaA,EAASC,OAC1CF,MAAK,SAACf,GACHkB,QAAQC,IAAInB,GACZ,EAAKoB,SAAS,CAACP,eAAeb,EAAKqB,cACnCC,OAAM,SAACC,GACPL,QAAQC,IAAII,QAX5B,+BAgBQ,OACI,6BACI,yBAAKnB,UAAU,eACX,yBAAKA,UAAU,wCACX,uBAAGA,UAAU,0BAA0BI,KAAK,KAA5C,cACA,4BAAQJ,UAAU,iBAAiBoB,KAAK,SAASC,cAAY,WACrDC,cAAY,0BAA0BC,gBAAc,yBACpDC,gBAAc,QAAQC,aAAW,qBACrC,0BAAMzB,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2B0B,GAAG,4BAIjD,yBAAK1B,UAAU,OACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,eACX,2BAAOoB,KAAK,OAAOpB,UAAU,iBAC7B,yBAAKA,UAAU,sBACX,4BAAQA,UAAU,kBAAkBoB,KAAK,UACrC,uBAAGpB,UAAU,sBAOjC,yBAAKA,UAAU,iBAOnB,yBAAKA,UAAU,aAGf,kBAAC,EAAD,CAASJ,KAAMF,KAAKD,MAAMgB,iBAC1B,yBAAKT,UAAU,iBAvD/B,GAA0BO,cCiBXoB,E,iLAbX,OACI,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4B,KAAK,QAAQC,OAAK,EAACC,UAAWtB,IACrC,kBAAC,IAAD,CAAUuB,KAAK,IAAIC,GAAG,iB,GAPxBzB,aCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,IAAD,KACI,kBAAC,EAAD,OACcC,SAASC,eAAe,SDyHpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAM4B,c","file":"static/js/main.09187eac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n\r\nexport class Product extends Component {\r\n    state = {\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.props.data.map((product,index)=>(\r\n                    <div className=\"row borders\" key={index}>\r\n                            <div className=\"col-6 col-md-4\">\r\n                                <div>\r\n                                    <img src={product.image}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col\">\r\n                                <div>\r\n                                    <a href={product.url}>{product.title}</a>\r\n                                </div>\r\n                                <div className=\"mt-2\">\r\n                                    <p>350$</p>\r\n                                    <p>Price: <del>799.99$</del> (35% off)</p>\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n                    </div>\r\n\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Product;\r\n","import React, { Component } from 'react';\r\nimport Product from \"./product/product\";\r\nimport '../style/sony.css';\r\n\r\nexport class Sony extends Component {\r\n    state ={\r\n        dataFromServer:[],\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/json/sony').then((response)=> response.json()\r\n            .then((data)=>{\r\n                console.log(data);\r\n                this.setState({dataFromServer:data.items});\r\n            })).catch((error)=>{\r\n                console.log(error);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"header-sony\">\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light\">\r\n                        <a className=\"navbar-brand text-white\" href=\"#\">BEST DEALS</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                                data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                                aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\r\n                        </div>\r\n                    </nav>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-8 offset-sm-2\">\r\n                            <div className=\"input-group\">\r\n                                <input type=\"text\" className=\"form-control\"/>\r\n                                <div className=\"input-group-append\">\r\n                                    <button className=\"btn btn-warning\" type=\"button\">\r\n                                        <i className=\"fa fa-search\"></i>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"empty-space\">\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n                <div className=\"row mt-3\">\r\n                </div>\r\n\r\n                <Product data={this.state.dataFromServer}/>\r\n                <div className=\"borders\" ></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sony;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport {BrowserRouter as Router,Switch,Route,Link,Redirect} from \"react-router-dom\";\nimport './App.css';\nimport Sony from \"./component/sony\"\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"App\">\n            <div className=\"container-fluid\">\n                <Switch>\n                    <Route path=\"/sony\" exact component={Sony}></Route>\n                    <Redirect from='*' to=\"/sony\"/>\n                </Switch>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(<BrowserRouter>\n                    <App />\n                </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}